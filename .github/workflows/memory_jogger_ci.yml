# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md

name: Memory Jogger CI

on:
  pull_request:
    paths-ignore:
      - "**.md"
      - "**.gitignore"
  push:
    branches: [master]
    paths-ignore:
      - "**.md"
      - "**.gitignore"

jobs:
  build_and_test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        backend: ["postgres", "sqlite"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.backend }}cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.44.1
          override: true
      - name: Install Postgres
        if: matrix.backend == 'postgres'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql
          echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/10/main/pg_hba.conf
          sudo service postgresql restart && sleep 3
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo service postgresql restart && sleep 3
          echo '::set-env name=PG_DATABASE_URL::postgres://postgres:postgres@localhost/'
      - name: Install Sqlite
        if: matrix.backend == 'sqlite'
        run: |
          curl -fsS --retry 3 -o sqlite-autoconf-3310100.tar.gz https://sqlite.org/2020/sqlite-autoconf-3310100.tar.gz
          tar zxf sqlite-autoconf-3310100.tar.gz
          cd sqlite-autoconf-3310100
          CFLAGS="$CFLAGS -O2 -fno-strict-aliasing \
              -DSQLITE_DEFAULT_FOREIGN_KEYS=1 \
              -DSQLITE_SECURE_DELETE \
              -DSQLITE_ENABLE_COLUMN_METADATA \
              -DSQLITE_ENABLE_FTS3_PARENTHESIS \
              -DSQLITE_ENABLE_RTREE=1 \
              -DSQLITE_SOUNDEX=1 \
              -DSQLITE_ENABLE_UNLOCK_NOTIFY \
              -DSQLITE_OMIT_LOOKASIDE=1 \
              -DSQLITE_ENABLE_DBSTAT_VTAB \
              -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1 \
              -DSQLITE_ENABLE_LOAD_EXTENSION \
              -DSQLITE_ENABLE_JSON1 \
              -DSQLITE_LIKE_DOESNT_MATCH_BLOBS \
              -DSQLITE_THREADSAFE=1 \
              -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
              -DSQLITE_MAX_SCHEMA_RETRY=25 \
              -DSQLITE_ENABLE_PREUPDATE_HOOK \
              -DSQLITE_ENABLE_SESSION \
              -DSQLITE_ENABLE_STMTVTAB \
              -DSQLITE_MAX_VARIABLE_NUMBER=250000" \
          ./configure --prefix=/usr \
              --enable-threadsafe \
              --enable-dynamic-extensions \
              --libdir=/usr/lib/x86_64-linux-gnu \
              --libexecdir=/usr/lib/x86_64-linux-gnu/sqlite3
          sudo make
          sudo make install
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features "${{ matrix.backend }} large_tests" --all-targets
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --features "${{ matrix.backend }} large_tests"
        env:
          MEMORY_JOGGER_TEST_POCKET_CONSUMER_KEY: "${{ secrets.MEMORY_JOGGER_TEST_POCKET_CONSUMER_KEY }}"
          MEMORY_JOGGER_TEST_POCKET_USER_ACCESS_TOKEN: "${{ secrets.MEMORY_JOGGER_TEST_POCKET_USER_ACCESS_TOKEN }}"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.44.1
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --verbose --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.44.1
          override: true
          components: clippy
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libsqlite3-dev
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker build . --tag rgardner/memory-jogger/memory_jogger:$(date +%s)

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build_and_test, fmt, clippy]
    steps:
      - uses: actions/checkout@v2
      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Build and push
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push --app ${{ secrets.HEROKU_APP_NAME }} web
      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release --app ${{ secrets.HEROKU_APP_NAME }} web
