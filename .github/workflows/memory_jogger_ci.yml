# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md

name: Memory Jogger CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  build_and_test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        backend: ["postgres", "sqlite"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.backend }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
      - name: Install Postgres
        if: matrix.backend == 'postgres'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql
          echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/10/main/pg_hba.conf
          sudo service postgresql restart && sleep 3
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo service postgresql restart && sleep 3
          echo "PG_DATABASE_URL=postgres://postgres:postgres@localhost/" >> "${GITHUB_ENV}"
      - name: Install Sqlite
        if: matrix.backend == 'sqlite'
        run: |
          curl -fsS --retry 3 -o sqlite-autoconf-3310100.tar.gz https://sqlite.org/2020/sqlite-autoconf-3310100.tar.gz
          tar zxf sqlite-autoconf-3310100.tar.gz
          cd sqlite-autoconf-3310100
          CFLAGS="$CFLAGS -O2 -fno-strict-aliasing \
              -DSQLITE_DEFAULT_FOREIGN_KEYS=1 \
              -DSQLITE_SECURE_DELETE \
              -DSQLITE_ENABLE_COLUMN_METADATA \
              -DSQLITE_ENABLE_FTS3_PARENTHESIS \
              -DSQLITE_ENABLE_RTREE=1 \
              -DSQLITE_SOUNDEX=1 \
              -DSQLITE_ENABLE_UNLOCK_NOTIFY \
              -DSQLITE_OMIT_LOOKASIDE=1 \
              -DSQLITE_ENABLE_DBSTAT_VTAB \
              -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1 \
              -DSQLITE_ENABLE_LOAD_EXTENSION \
              -DSQLITE_ENABLE_JSON1 \
              -DSQLITE_LIKE_DOESNT_MATCH_BLOBS \
              -DSQLITE_THREADSAFE=1 \
              -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
              -DSQLITE_MAX_SCHEMA_RETRY=25 \
              -DSQLITE_ENABLE_PREUPDATE_HOOK \
              -DSQLITE_ENABLE_SESSION \
              -DSQLITE_ENABLE_STMTVTAB \
              -DSQLITE_MAX_VARIABLE_NUMBER=250000" \
          ./configure --prefix=/usr \
              --enable-threadsafe \
              --enable-dynamic-extensions \
              --libdir=/usr/lib/x86_64-linux-gnu \
              --libexecdir=/usr/lib/x86_64-linux-gnu/sqlite3
          sudo make
          sudo make install
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features "${{ matrix.backend }} large_tests" --all-targets
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --features "${{ matrix.backend }} large_tests"
        env:
          MEMORY_JOGGER_TEST_POCKET_CONSUMER_KEY: "${{ secrets.MEMORY_JOGGER_TEST_POCKET_CONSUMER_KEY }}"
          MEMORY_JOGGER_TEST_POCKET_USER_ACCESS_TOKEN: "${{ secrets.MEMORY_JOGGER_TEST_POCKET_USER_ACCESS_TOKEN }}"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --verbose --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libsqlite3-dev
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -D warnings

  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker build . --tag rgardner/memory-jogger/memory_jogger:$(date +%s)

  cache_python_deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v1
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.2

      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

  extras:
    needs: cache_python_deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v1
        with:
          python: "3.10"

      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Test
        run: poetry run pytest
